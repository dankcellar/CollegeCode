/**
 * Create by IGotUrBack.Inc
 */

public class BinarySearchTrees
{

    static int testNumber = 0;

    public static void main(String[] args) 
    {
        boolean simpleTest = false;
        boolean complexTest = true;

        if (complexTest)
        {
            System.out.println("-------------------------");
			System.out.println("Test Frame: Walled Garden");
			System.out.println("-------------------------");


			BST myTree = new BST();

			int[] nums = {50, 30, 34, 25, 70, 55, 80, 60, 75, 90};

			testSetUp(myTree, nums);

			myTree.Delete(90);
			myTree.Delete(30);

			runTest(myTree, nums);

			System.out.println("---------------------------");
			System.out.println("Test Frame: Grove of Trials");
			System.out.println("---------------------------");

			BST[] groves = new BST[5];

			int[][] bushes = new int[5][];
			bushes [0] = new int[] {48, 62, 68, 29, 13, 32, 33, 6, 6, 97, 30, 99, 32, 36, 30, 93};

			bushes [1] = new int[] {38, 81, 28, 89, 35, 88, 31, 33, 86, 68, 51, 65, 6, 20, 21};
			bushes [2] = new int[] {20, 46, 39, 88, 18, 75, 88, 4, 67, 80, 100, 2, 47, 66, 81, 17, 77};
			bushes [3] = new int[] {41, 90, 18, 21, 46, 63, 94, 50, 94, 56, 28, 87, 33};
			bushes [4] = new int[] {47, 86, 74, 59, 60, 19, 92, 14, 22, 92, 23, 41, 2, 68, 83, 18, 51, 85, 13, 74, 56, 46, 62, 8};


			int[][] EdwardScissorhands = new int[5][];
			EdwardScissorhands [0] = new int[] {81, 8, 30, 74, 74, 62, 85, 6, 78, 57, 93, 52, 79, 54, 17, 21, 58};
			EdwardScissorhands [1] = new int[] {5, 75, 36, 52, 17, 85, 8, 30, 2, 85, 89, 75};
			EdwardScissorhands [2] = new int[] {19, 5, 91, 53, 1, 49, 64, 40, 29, 22, 94, 65, 17, 68, 1};
			EdwardScissorhands [3] = new int[] {17, 87, 75, 82, 69, 49, 52, 61, 15, 61, 97, 70, 77, 77, 88, 50, 21, 24, 72};
			EdwardScissorhands [4] = new int[] {15, 38, 24, 3, 15, 61, 3, 59, 67, 67, 62, 66, 45, 8, 22, 16, 23};

			for (int i = 0; i < groves.length; i++)
			{
			    groves[i] = new BST();

			    testSetUp(groves[i], bushes[i]);

			    for (int blade:EdwardScissorhands[i])
			    {
			        groves[i].Delete(blade);
			    }

			    runTest(groves[i], bushes[i]);

			}

			System.out.println("------------------------");
			System.out.println("Test Frame: Forest Fire ");
			System.out.println("------------------------");

			BST forest[] = new BST[10];

			int leaves[][] = new int[10][];

			leaves [0] = new int[] {138, 52, 2, 15, 80, 81, 97, 143, 21, 169, 16, 136, 25, 148, 113, 8, 165, 178, 122, 117, 135, 76, 176, 170, 19, 81, 148, 188, 78, 104, 110, 195, 124, 146, 140, 10, 38, 110, 141, 167, 22, 168, 139, 13, 153, 27, 128, 200, 40, 13, 195, 60, 182, 50, 184, 113, 7, 197, 180, 42, 58, 118, 22, 70, 70, 5, 179, 53, 70, 165, 189, 147, 58, 28, 183, 44, 121, 17, 65, 171, 20, 97, 68, 148, 192, 14, 56, 134, 112, 192, 200, 172, 144, 15, 4, 178, 31, 75, 163, 160, 44, 145, 72, 53, 2, 174, 101, 140, 163, 109, 123, 31, 145, 122, 153, 163, 4, 59, 166, 120, 132, 34, 187, 139, 51, 14, 110, 123, 96, 7, 68};
			leaves [1] = new int[] {68, 63, 14, 56, 66, 29, 43, 12, 53, 133, 119, 170, 112, 56, 134, 91, 93, 39, 78, 32, 29, 187, 131, 165, 45, 148, 41, 133, 128, 75, 38, 80, 21, 112, 56, 27, 108, 2, 134, 144, 116, 53, 3, 77, 70, 137, 158, 16, 140, 161, 199, 66, 111, 12, 101, 186, 15, 175, 105, 67, 163, 67, 199, 57, 61, 189, 84, 4, 122, 86, 100, 101, 195, 76, 135, 76, 126, 86, 199, 113, 140, 53, 69, 52, 197, 61, 48, 16, 105, 186, 171, 35, 23, 44, 18, 36, 173, 89, 129, 166, 154, 154, 63, 4, 81, 173, 57, 13, 92, 85, 110, 100, 144, 53, 177, 22, 169, 44, 82, 168};
			leaves [2] = new int[] {93, 53, 66, 132, 151, 164, 117, 37, 183, 170, 124, 137, 14, 37, 47, 51, 18, 101, 35, 14, 193, 188, 51, 105, 130, 55, 84, 89, 158, 119, 164, 49, 76, 164, 112, 120, 41, 135, 9, 133, 17, 61, 138, 108, 71, 78, 45, 180, 116, 86, 166, 95, 49, 86, 183, 71, 49, 104, 88, 36, 19, 37, 4, 151, 191, 184, 138, 88, 28, 23, 74, 151, 179, 82, 78, 60, 37, 80, 47, 199, 28, 53, 139, 192, 47, 162, 141, 118, 67, 88, 191, 183, 142, 105, 88, 109, 171, 179, 56, 183, 129, 50, 127, 197, 32, 90, 16, 30, 106, 57, 12, 5, 152, 128, 43, 10, 98, 106, 31, 100, 45, 14};
			leaves [3] = new int[] {4, 72, 66, 70, 84, 168, 83, 149, 29, 13, 45, 52, 91, 46, 127, 145, 146, 150, 64, 31, 73, 67, 47, 103, 138, 152, 110, 189, 43, 177, 114, 81, 189, 47, 109, 163, 97, 112, 22, 97, 40, 167, 100, 74, 139, 78, 66, 188, 123, 88, 86, 127, 16, 56, 62, 105, 124, 120, 147, 153, 41, 174, 60, 128, 150, 190, 75, 109, 77, 127, 108, 156, 95, 162, 192, 80, 90, 58, 159, 76, 158, 177, 187, 117, 110, 182, 61, 35, 158, 180, 168, 166, 135, 26, 149, 166, 120, 110, 174, 133, 143, 61, 25, 193, 8, 170, 120, 110, 89, 128, 78, 109, 174, 76, 148, 140, 131, 164, 35, 92, 110, 119, 123, 122, 78, 137, 73, 156, 78, 51};
			leaves [4] = new int[] {48, 39, 160, 90, 82, 61, 192, 162, 25, 82, 184, 110, 169, 91, 175, 38, 163, 31, 20, 81, 151, 200, 13, 199, 81, 165, 148, 157, 8, 189, 40, 12, 27, 195, 185, 192, 96, 110, 78, 133, 124, 160, 42, 138, 149, 86, 25, 67, 78, 192, 44, 149, 78, 66, 185, 143, 150, 137, 23, 154, 82, 84, 176, 147, 99, 146, 17, 193, 108, 141, 144, 49, 103, 142, 162, 91, 108, 73, 57, 150, 38, 129, 174, 124, 145, 155, 118, 55, 108, 82, 184, 144, 180, 8, 117, 50, 18, 182, 149, 73, 50, 77, 20, 171, 30, 26, 57, 50, 32, 178, 110, 161, 105, 44, 55, 79, 56, 199, 125, 189, 152, 23, 136, 130, 153, 15, 175, 131, 119, 101, 65, 100, 80, 15, 187, 118};
			leaves [5] = new int[] {135, 49, 63, 119, 29, 50, 130, 16, 22, 65, 43, 77, 65, 147, 130, 190, 142, 56, 13, 143, 91, 35, 94, 153, 33, 25, 155, 179, 86, 145, 122, 154, 165, 111, 127, 118, 50, 18, 16, 51, 70, 106, 187, 148, 145, 93, 165, 136, 14, 137, 161, 17, 140, 116, 188, 96, 50, 166, 104, 5, 91, 102, 108, 26, 88, 31, 130, 62, 168, 20, 48, 21, 74, 60, 14, 35, 182, 79, 190, 113, 42, 37, 109, 70, 59, 145, 122, 77, 37, 15, 27, 146, 20, 73, 144, 13, 199, 166, 104, 184, 15, 159, 58, 175, 11};
			leaves [6] = new int[] {78, 196, 193, 94, 31, 12, 96, 180, 172, 194, 112, 168, 166, 129, 72, 114, 152, 10, 156, 192, 130, 135, 102, 143, 150, 169, 3, 129, 9, 100, 76, 174, 133, 59, 147, 190, 152, 118, 23, 154, 130, 23, 90, 33, 105, 106, 163, 71, 158, 37, 63, 36, 1, 192, 42, 1, 42, 95, 91, 172, 99, 121, 63, 170, 13, 63, 133, 165, 34, 148, 43, 38, 107, 58, 39, 82, 178, 185, 154, 32, 162, 103, 30, 193, 176, 148, 47, 93, 176, 65, 136, 153, 32, 67, 174, 191, 128, 20, 82, 133, 106, 162, 142, 12, 52, 19, 82, 109, 79, 197, 54, 154, 167, 17, 152, 97, 130, 143, 18, 88, 32, 111, 2, 154, 32, 172, 99, 18, 38, 85, 98};
			leaves [7] = new int[] {65, 143, 175, 132, 116, 192, 93, 76, 11, 27, 11, 8, 166, 105, 108, 93, 165, 197, 49, 51, 180, 172, 93, 24, 43, 107, 4, 98, 162, 124, 26, 132, 196, 163, 36, 199, 21, 55, 114, 77, 96, 102, 122, 121, 86, 144, 144, 31, 57, 132, 119, 195, 78, 7, 128, 125, 166, 110, 144, 160, 177, 55, 200, 110, 172, 6, 11, 119, 16, 173, 12, 126, 83, 101, 46, 118, 33, 71, 86, 170, 143, 75, 61, 82, 169, 195, 82, 192, 199, 180, 102, 153, 49, 60, 42, 14, 89, 124, 83, 27, 162, 28, 126, 4, 196, 32, 180, 171, 30, 45, 186, 133, 126, 101, 156, 160, 131, 1, 160, 158, 28, 134, 20};
			leaves [8] = new int[] {58, 73, 82, 127, 39, 169, 20, 129, 128, 61, 97, 192, 150, 189, 69, 191, 154, 86, 5, 102, 53, 196, 112, 185, 49, 30, 15, 102, 103, 161, 29, 126, 150, 173, 29, 54, 43, 51, 94, 193, 13, 68, 94, 109, 160, 112, 67, 153, 169, 39, 72, 149, 129, 111, 145, 157, 130, 82, 69, 58, 142, 198, 101, 104, 111, 137, 45, 27, 32, 14, 155, 94, 167, 89, 140, 180, 4, 152, 79, 126, 109, 72, 44, 191, 176, 126, 120, 75, 178, 51, 15, 71, 141, 124, 75, 78, 53, 139, 179, 61, 51, 81, 109, 164, 105, 58, 91, 30, 71, 24, 95, 100, 101, 44, 194, 32, 99, 197, 124, 35, 30, 118, 86, 88, 72, 146, 178, 104, 145, 12, 132, 87, 91, 119, 10, 33, 83, 143, 38, 51, 111, 95};
			leaves [9] = new int[] {72, 74, 36, 67, 134, 51, 113, 184, 109, 165, 102, 68, 108, 29, 196, 8, 147, 149, 63, 133, 86, 18, 131, 9, 109, 113, 2, 144, 137, 98, 49, 65, 11, 53, 186, 69, 101, 152, 27, 137, 1, 106, 170, 165, 176, 24, 10, 58, 40, 90, 71, 178, 129, 116, 63, 171, 54, 173, 109, 8, 29, 3, 10, 49, 58, 132, 181, 109, 111, 112, 35, 108, 32, 17, 41, 82, 52, 28, 23, 140, 26, 104, 26, 76, 167, 172, 127, 135, 164, 189, 39, 119, 91, 62, 102, 37, 106, 43, 182, 97, 4, 59, 140, 159, 33, 149, 110, 149, 95, 36, 146, 29, 8, 9, 23, 90, 175, 78, 177, 162, 52, 5, 126, 24, 115, 167, 66, 146, 54, 40, 66, 190, 106, 187, 88};

			int fire[][] = new int[10][];

			fire [0] = new int[] {25, 173, 62, 11, 133, 80, 146, 39, 4, 147, 139, 38, 134, 51, 190, 60, 149, 15, 190, 133, 95, 168, 56, 193, 189, 38, 25, 173, 168, 141, 132, 125, 79, 65, 54, 27, 51, 82, 75, 112};
			fire [1] = new int[] {82, 134, 136, 193, 74, 10, 108, 127, 171, 166, 10, 17, 95, 96, 93, 59, 55, 74, 35, 63, 153, 196, 134, 9, 104, 78, 193, 131, 7, 167, 183, 27, 29, 138, 71};
			fire [2] = new int[] {86, 13, 155, 141, 1, 195, 2, 56, 62, 90, 177, 183, 40, 89, 65, 75, 73, 157, 142, 200, 58, 37, 169, 116, 35, 196, 33, 105, 53, 19, 182, 174, 23, 53, 26, 140, 94, 16, 70, 191};
			fire [3] = new int[] {101, 30, 146, 192, 194, 189, 94, 109, 191, 107, 176, 104, 191, 114, 76, 83, 156, 115, 5, 25, 150, 107, 89, 186, 33, 12, 73, 134, 194, 184, 150, 39, 98, 38, 113, 39, 112, 172, 125, 38, 139, 124, 40};
			fire [4] = new int[] {95, 119, 82, 61, 6, 97, 191, 83, 90, 133, 50, 132, 79, 86, 131, 72, 75, 115, 58, 119, 143, 30, 143, 131, 59, 73, 197, 45, 142, 134, 25, 144, 136, 178, 105, 52, 92, 151, 33, 43, 106};
			fire [5] = new int[] {69, 51, 193, 199, 21, 69, 197, 34, 139, 21, 2, 3, 8, 108, 159, 155, 41, 93, 64, 170, 184, 92, 185, 159, 6, 193, 169, 80, 70, 182, 110, 144, 95, 89, 3, 184};
			fire [6] = new int[] {183, 118, 106, 168, 22, 70, 175, 52, 120, 64, 90, 67, 61, 62, 92, 67, 182, 46, 126, 26, 152, 77, 78, 80, 90, 85, 39, 198, 123, 58, 118, 61, 27, 71, 86, 107, 54, 124, 56, 160, 5};
			fire [7] = new int[] {8, 179, 194, 184, 129, 187, 145, 177, 45, 81, 26, 168, 71, 190, 11, 111, 155, 155, 52, 129, 43, 40, 152, 181, 37, 188, 164, 97, 134, 129, 114, 143, 25, 95, 43, 70, 51, 6, 25};
			fire [8] = new int[] {167, 200, 37, 25, 116, 158, 47, 141, 54, 119, 95, 78, 113, 190, 135, 193, 170, 155, 136, 87, 138, 33, 168, 19, 58, 82, 120, 41, 196, 20, 49, 125, 48, 51, 42, 131, 161, 26, 133, 108, 37, 177, 99};
			fire [9] = new int[] {129, 154, 9, 100, 199, 163, 41, 104, 32, 197, 51, 155, 46, 62, 83, 87, 46, 65, 177, 143, 165, 188, 83, 31, 36, 140, 103, 10, 43, 131, 80, 46};



			for (int i = 0; i < forest.length; i++)
			{
			    forest[i] = new BST();

			    testSetUp(forest[i], leaves[i]);

			    for (int leaf:fire[i])
			    {
			        forest[i].Delete(leaf);
			    }

			    runTest(forest[i], leaves[i]);
			}
        }

        if (simpleTest)
        {
            System.out.println("-------------------------");
			System.out.println("Test Frame: Walled Garden");
			System.out.println("-------------------------");

			BST Oaky = new BST();

			int[] nums = {50, 30, 34, 25, 70, 55, 80, 60, 75, 90};
			int[] cuts = {90, 30};

			simpleTest(Oaky, nums, cuts);

			System.out.println("---------------------------");
			System.out.println("Test Frame: Grove of Trials");
			System.out.println("---------------------------");

			BST[] groves = new BST[5];

			int[][] bushes = new int[5][];
			bushes [0] = new int[] {48, 62, 68, 29, 13, 32, 33, 6, 6, 97, 30, 99, 32, 36, 30, 93};
			bushes [1] = new int[] {38, 81, 28, 89, 35, 88, 31, 33, 86, 68, 51, 65, 6, 20, 21};
			bushes [2] = new int[] {20, 46, 39, 88, 18, 75, 88, 4, 67, 80, 100, 2, 47, 66, 81, 17, 77};
			bushes [3] = new int[] {41, 90, 18, 21, 46, 63, 94, 50, 94, 56, 28, 87, 33};
			bushes [4] = new int[] {47, 86, 74, 59, 60, 19, 92, 14, 22, 92, 23, 41, 2, 68, 83, 18, 51, 85, 13, 74, 56, 46, 62, 8};


			int[][] EdwardScissorhands = new int[5][];
			EdwardScissorhands [0] = new int[] {81, 8, 30, 74, 74, 62, 85, 6, 78, 57, 93, 52, 79, 54, 17, 21, 58};
			EdwardScissorhands [1] = new int[] {5, 75, 36, 52, 17, 85, 8, 30, 2, 85, 89, 75};
			EdwardScissorhands [2] = new int[] {19, 5, 91, 53, 1, 49, 64, 40, 29, 22, 94, 65, 17, 68, 1};
			EdwardScissorhands [3] = new int[] {17, 87, 75, 82, 69, 49, 52, 61, 15, 61, 97, 70, 77, 77, 88, 50, 21, 24, 72};
			EdwardScissorhands [4] = new int[] {15, 38, 24, 3, 15, 61, 3, 59, 67, 67, 62, 66, 45, 8, 22, 16, 23};

			for (int i = 0; i < groves.length; i++)
			{
			    groves[i] = new BST();
			    simpleTest(groves[i], bushes[i], EdwardScissorhands[i]);
			}

			System.out.println("------------------------");
			System.out.println("Test Frame: Forest Fire ");
			System.out.println("------------------------");

			BST forest[] = new BST[10];

			int leaves[][] = new int[10][];

			leaves [0] = new int[] {138, 52, 2, 15, 80, 81, 97, 143, 21, 169, 16, 136, 25, 148, 113, 8, 165, 178, 122, 117, 135, 76, 176, 170, 19, 81, 148, 188, 78, 104, 110, 195, 124, 146, 140, 10, 38, 110, 141, 167, 22, 168, 139, 13, 153, 27, 128, 200, 40, 13, 195, 60, 182, 50, 184, 113, 7, 197, 180, 42, 58, 118, 22, 70, 70, 5, 179, 53, 70, 165, 189, 147, 58, 28, 183, 44, 121, 17, 65, 171, 20, 97, 68, 148, 192, 14, 56, 134, 112, 192, 200, 172, 144, 15, 4, 178, 31, 75, 163, 160, 44, 145, 72, 53, 2, 174, 101, 140, 163, 109, 123, 31, 145, 122, 153, 163, 4, 59, 166, 120, 132, 34, 187, 139, 51, 14, 110, 123, 96, 7, 68};
			leaves [1] = new int[] {68, 63, 14, 56, 66, 29, 43, 12, 53, 133, 119, 170, 112, 56, 134, 91, 93, 39, 78, 32, 29, 187, 131, 165, 45, 148, 41, 133, 128, 75, 38, 80, 21, 112, 56, 27, 108, 2, 134, 144, 116, 53, 3, 77, 70, 137, 158, 16, 140, 161, 199, 66, 111, 12, 101, 186, 15, 175, 105, 67, 163, 67, 199, 57, 61, 189, 84, 4, 122, 86, 100, 101, 195, 76, 135, 76, 126, 86, 199, 113, 140, 53, 69, 52, 197, 61, 48, 16, 105, 186, 171, 35, 23, 44, 18, 36, 173, 89, 129, 166, 154, 154, 63, 4, 81, 173, 57, 13, 92, 85, 110, 100, 144, 53, 177, 22, 169, 44, 82, 168};
			leaves [2] = new int[] {93, 53, 66, 132, 151, 164, 117, 37, 183, 170, 124, 137, 14, 37, 47, 51, 18, 101, 35, 14, 193, 188, 51, 105, 130, 55, 84, 89, 158, 119, 164, 49, 76, 164, 112, 120, 41, 135, 9, 133, 17, 61, 138, 108, 71, 78, 45, 180, 116, 86, 166, 95, 49, 86, 183, 71, 49, 104, 88, 36, 19, 37, 4, 151, 191, 184, 138, 88, 28, 23, 74, 151, 179, 82, 78, 60, 37, 80, 47, 199, 28, 53, 139, 192, 47, 162, 141, 118, 67, 88, 191, 183, 142, 105, 88, 109, 171, 179, 56, 183, 129, 50, 127, 197, 32, 90, 16, 30, 106, 57, 12, 5, 152, 128, 43, 10, 98, 106, 31, 100, 45, 14};
			leaves [3] = new int[] {4, 72, 66, 70, 84, 168, 83, 149, 29, 13, 45, 52, 91, 46, 127, 145, 146, 150, 64, 31, 73, 67, 47, 103, 138, 152, 110, 189, 43, 177, 114, 81, 189, 47, 109, 163, 97, 112, 22, 97, 40, 167, 100, 74, 139, 78, 66, 188, 123, 88, 86, 127, 16, 56, 62, 105, 124, 120, 147, 153, 41, 174, 60, 128, 150, 190, 75, 109, 77, 127, 108, 156, 95, 162, 192, 80, 90, 58, 159, 76, 158, 177, 187, 117, 110, 182, 61, 35, 158, 180, 168, 166, 135, 26, 149, 166, 120, 110, 174, 133, 143, 61, 25, 193, 8, 170, 120, 110, 89, 128, 78, 109, 174, 76, 148, 140, 131, 164, 35, 92, 110, 119, 123, 122, 78, 137, 73, 156, 78, 51};
			leaves [4] = new int[] {48, 39, 160, 90, 82, 61, 192, 162, 25, 82, 184, 110, 169, 91, 175, 38, 163, 31, 20, 81, 151, 200, 13, 199, 81, 165, 148, 157, 8, 189, 40, 12, 27, 195, 185, 192, 96, 110, 78, 133, 124, 160, 42, 138, 149, 86, 25, 67, 78, 192, 44, 149, 78, 66, 185, 143, 150, 137, 23, 154, 82, 84, 176, 147, 99, 146, 17, 193, 108, 141, 144, 49, 103, 142, 162, 91, 108, 73, 57, 150, 38, 129, 174, 124, 145, 155, 118, 55, 108, 82, 184, 144, 180, 8, 117, 50, 18, 182, 149, 73, 50, 77, 20, 171, 30, 26, 57, 50, 32, 178, 110, 161, 105, 44, 55, 79, 56, 199, 125, 189, 152, 23, 136, 130, 153, 15, 175, 131, 119, 101, 65, 100, 80, 15, 187, 118};
			leaves [5] = new int[] {135, 49, 63, 119, 29, 50, 130, 16, 22, 65, 43, 77, 65, 147, 130, 190, 142, 56, 13, 143, 91, 35, 94, 153, 33, 25, 155, 179, 86, 145, 122, 154, 165, 111, 127, 118, 50, 18, 16, 51, 70, 106, 187, 148, 145, 93, 165, 136, 14, 137, 161, 17, 140, 116, 188, 96, 50, 166, 104, 5, 91, 102, 108, 26, 88, 31, 130, 62, 168, 20, 48, 21, 74, 60, 14, 35, 182, 79, 190, 113, 42, 37, 109, 70, 59, 145, 122, 77, 37, 15, 27, 146, 20, 73, 144, 13, 199, 166, 104, 184, 15, 159, 58, 175, 11};
			leaves [6] = new int[] {78, 196, 193, 94, 31, 12, 96, 180, 172, 194, 112, 168, 166, 129, 72, 114, 152, 10, 156, 192, 130, 135, 102, 143, 150, 169, 3, 129, 9, 100, 76, 174, 133, 59, 147, 190, 152, 118, 23, 154, 130, 23, 90, 33, 105, 106, 163, 71, 158, 37, 63, 36, 1, 192, 42, 1, 42, 95, 91, 172, 99, 121, 63, 170, 13, 63, 133, 165, 34, 148, 43, 38, 107, 58, 39, 82, 178, 185, 154, 32, 162, 103, 30, 193, 176, 148, 47, 93, 176, 65, 136, 153, 32, 67, 174, 191, 128, 20, 82, 133, 106, 162, 142, 12, 52, 19, 82, 109, 79, 197, 54, 154, 167, 17, 152, 97, 130, 143, 18, 88, 32, 111, 2, 154, 32, 172, 99, 18, 38, 85, 98};
			leaves [7] = new int[] {65, 143, 175, 132, 116, 192, 93, 76, 11, 27, 11, 8, 166, 105, 108, 93, 165, 197, 49, 51, 180, 172, 93, 24, 43, 107, 4, 98, 162, 124, 26, 132, 196, 163, 36, 199, 21, 55, 114, 77, 96, 102, 122, 121, 86, 144, 144, 31, 57, 132, 119, 195, 78, 7, 128, 125, 166, 110, 144, 160, 177, 55, 200, 110, 172, 6, 11, 119, 16, 173, 12, 126, 83, 101, 46, 118, 33, 71, 86, 170, 143, 75, 61, 82, 169, 195, 82, 192, 199, 180, 102, 153, 49, 60, 42, 14, 89, 124, 83, 27, 162, 28, 126, 4, 196, 32, 180, 171, 30, 45, 186, 133, 126, 101, 156, 160, 131, 1, 160, 158, 28, 134, 20};
			leaves [8] = new int[] {58, 73, 82, 127, 39, 169, 20, 129, 128, 61, 97, 192, 150, 189, 69, 191, 154, 86, 5, 102, 53, 196, 112, 185, 49, 30, 15, 102, 103, 161, 29, 126, 150, 173, 29, 54, 43, 51, 94, 193, 13, 68, 94, 109, 160, 112, 67, 153, 169, 39, 72, 149, 129, 111, 145, 157, 130, 82, 69, 58, 142, 198, 101, 104, 111, 137, 45, 27, 32, 14, 155, 94, 167, 89, 140, 180, 4, 152, 79, 126, 109, 72, 44, 191, 176, 126, 120, 75, 178, 51, 15, 71, 141, 124, 75, 78, 53, 139, 179, 61, 51, 81, 109, 164, 105, 58, 91, 30, 71, 24, 95, 100, 101, 44, 194, 32, 99, 197, 124, 35, 30, 118, 86, 88, 72, 146, 178, 104, 145, 12, 132, 87, 91, 119, 10, 33, 83, 143, 38, 51, 111, 95};
			leaves [9] = new int[] {72, 74, 36, 67, 134, 51, 113, 184, 109, 165, 102, 68, 108, 29, 196, 8, 147, 149, 63, 133, 86, 18, 131, 9, 109, 113, 2, 144, 137, 98, 49, 65, 11, 53, 186, 69, 101, 152, 27, 137, 1, 106, 170, 165, 176, 24, 10, 58, 40, 90, 71, 178, 129, 116, 63, 171, 54, 173, 109, 8, 29, 3, 10, 49, 58, 132, 181, 109, 111, 112, 35, 108, 32, 17, 41, 82, 52, 28, 23, 140, 26, 104, 26, 76, 167, 172, 127, 135, 164, 189, 39, 119, 91, 62, 102, 37, 106, 43, 182, 97, 4, 59, 140, 159, 33, 149, 110, 149, 95, 36, 146, 29, 8, 9, 23, 90, 175, 78, 177, 162, 52, 5, 126, 24, 115, 167, 66, 146, 54, 40, 66, 190, 106, 187, 88};

			int fire[][] = new int[10][];

			fire [0] = new int[] {25, 173, 62, 11, 133, 80, 146, 39, 4, 147, 139, 38, 134, 51, 190, 60, 149, 15, 190, 133, 95, 168, 56, 193, 189, 38, 25, 173, 168, 141, 132, 125, 79, 65, 54, 27, 51, 82, 75, 112};
			fire [1] = new int[] {82, 134, 136, 193, 74, 10, 108, 127, 171, 166, 10, 17, 95, 96, 93, 59, 55, 74, 35, 63, 153, 196, 134, 9, 104, 78, 193, 131, 7, 167, 183, 27, 29, 138, 71};
			fire [2] = new int[] {86, 13, 155, 141, 1, 195, 2, 56, 62, 90, 177, 183, 40, 89, 65, 75, 73, 157, 142, 200, 58, 37, 169, 116, 35, 196, 33, 105, 53, 19, 182, 174, 23, 53, 26, 140, 94, 16, 70, 191};
			fire [3] = new int[] {101, 30, 146, 192, 194, 189, 94, 109, 191, 107, 176, 104, 191, 114, 76, 83, 156, 115, 5, 25, 150, 107, 89, 186, 33, 12, 73, 134, 194, 184, 150, 39, 98, 38, 113, 39, 112, 172, 125, 38, 139, 124, 40};
			fire [4] = new int[] {95, 119, 82, 61, 6, 97, 191, 83, 90, 133, 50, 132, 79, 86, 131, 72, 75, 115, 58, 119, 143, 30, 143, 131, 59, 73, 197, 45, 142, 134, 25, 144, 136, 178, 105, 52, 92, 151, 33, 43, 106};
			fire [5] = new int[] {69, 51, 193, 199, 21, 69, 197, 34, 139, 21, 2, 3, 8, 108, 159, 155, 41, 93, 64, 170, 184, 92, 185, 159, 6, 193, 169, 80, 70, 182, 110, 144, 95, 89, 3, 184};
			fire [6] = new int[] {183, 118, 106, 168, 22, 70, 175, 52, 120, 64, 90, 67, 61, 62, 92, 67, 182, 46, 126, 26, 152, 77, 78, 80, 90, 85, 39, 198, 123, 58, 118, 61, 27, 71, 86, 107, 54, 124, 56, 160, 5};
			fire [7] = new int[] {8, 179, 194, 184, 129, 187, 145, 177, 45, 81, 26, 168, 71, 190, 11, 111, 155, 155, 52, 129, 43, 40, 152, 181, 37, 188, 164, 97, 134, 129, 114, 143, 25, 95, 43, 70, 51, 6, 25};
			fire [8] = new int[] {167, 200, 37, 25, 116, 158, 47, 141, 54, 119, 95, 78, 113, 190, 135, 193, 170, 155, 136, 87, 138, 33, 168, 19, 58, 82, 120, 41, 196, 20, 49, 125, 48, 51, 42, 131, 161, 26, 133, 108, 37, 177, 99};
			fire [9] = new int[] {129, 154, 9, 100, 199, 163, 41, 104, 32, 197, 51, 155, 46, 62, 83, 87, 46, 65, 177, 143, 165, 188, 83, 31, 36, 140, 103, 10, 43, 131, 80, 46};



			for (int i = 0; i < forest.length; i++)
			{
			    forest[i] = new BST();
			    simpleTest(forest[i], leaves[i], fire[i]);
			}
        }
    }

    public static void simpleTest(BST tree, int[] leaves, int[] blades)
    {
        for (int leaf:leaves)
        {
            tree.Insert(leaf);
        }

        inOrder(tree);

        for (int blade:blades)
        {
            tree.Delete(blade);
        }

        inOrder(tree);
    }


    public static void testSetUp(BST tree, int[] numbers)
    {
        System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
          System.out.print("@@@@@@@@@@@@@@@@  Test #" + ++testNumber);
                                     System.out.print("   @@@@@@@@@@@@@@@@@@@@@\n");

        System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n");



        for (int num:numbers)
        {
            tree.Insert(num);
        }

        System.out.println("*******************");
        System.out.println("*** Stats, plz? ***");
        System.out.println("*******************");
        System.out.println();

        System.out.println("The root is " + tree.getRootNode().GetKeyValue());
        System.out.println("The minimum value is " + tree.getMin());
        System.out.println("The maximum value is " + tree.getMax());
        System.out.println();


        System.out.println("**************************");
        System.out.println("*** Who is your daddy? ***");
        System.out.println("**************************");
        System.out.println();


        for (int num:numbers)
        {
           DisplayParent(tree, num);
        }


        System.out.println();
        System.out.println("*************************************************************");
        System.out.println("*** How many dependents do you have (including yourself)? ***");
        System.out.println("*************************************************************");
        System.out.println();

        for (int num:numbers)
        {
            DisplaySubtreeSize(tree, num);
        }

        System.out.println();
        System.out.println("*************************************************");
        System.out.println("*** How do you rank in an in-order traversal? ***");
        System.out.println("*************************************************");
        System.out.println();

        for (int num:numbers)
        {
            DisplayRank(tree, num);
        }

        System.out.println();
    }

    public static void runTest(BST tree, int[] numbers)
    {
        System.out.println("################################################");
        System.out.println("++++++++++++++++++++++++++++++++++++++++++++++++");
        System.out.println("============  Leaves'Lives Leaving  ============");
        System.out.println("++++++++++++++++++++++++++++++++++++++++++++++++");
        System.out.println("################################################");

        System.out.println();

        System.out.println("*******************");
        System.out.println("*** Stats, plz? ***");
        System.out.println("*******************");
        System.out.println();

        System.out.println("The root is " + tree.getRootNode().GetKeyValue());
        System.out.println("The minimum value is " + tree.getMin());
        System.out.println("The maximum value is " + tree.getMax());
        System.out.println();


        System.out.println("**************************");
        System.out.println("*** Who is your daddy? ***");
        System.out.println("**************************");
        System.out.println();


        for (int num:numbers)
        {
            DisplayParent(tree, num);
        }


        System.out.println();
        System.out.println("*************************************************************");
        System.out.println("*** How many dependents do you have (including yourself)? ***");
        System.out.println("*************************************************************");
        System.out.println();

        for (int num:numbers)
        {
            DisplaySubtreeSize(tree, num);
        }

        System.out.println();
        System.out.println("*************************************************");
        System.out.println("*** How do you rank in an in-order traversal? ***");
        System.out.println("*************************************************");
        System.out.println();

        for (int num:numbers)
        {
            DisplayRank(tree, num);
        }

        System.out.println();
    }

    public static void DisplayParent(BST tree, int data)
    {
        BSTNode temp = tree.Search(data);

        if (temp == tree.getRootNode())
        {
            System.out.println("This is the root node.");
            return;
        }

        if (temp != null)
        {
           // System.out.println("The parent of " + data + " is " + temp.getParent().GetKeyValue());
        }
        else
        {
            System.out.println("A leaf with " + data + " is not present.");
        }
    }


    public static void DisplayRank(BST tree, int data)
    {
        BSTNode temp = tree.Search(data);

        if (temp == null)
        {
            System.out.println("A leaf with " + data + " is not present.");
        }
        else
        {
            System.out.println("The rank of " + data + " is " + tree.getRank(temp));
        }
    }



    public static void DisplaySubtreeSize(BST tree, int data)
    {
        BSTNode temp = tree.Search(data);

        if (temp == null)
        {
            System.out.println("A leaf with " + data + " is not present.");
        }
        else
        {
            System.out.println("The subtree size of " + data + " is " + temp.getSubtreeSize());
        }
    }

    public static void inOrder(BST tree)
    {
        inOrder(tree.m_objRootNode);
        System.out.println();
    }

    private static void inOrder(BSTNode root)
    {
        if (root == null)
        {
            return;
        }

        inOrder(root.GetLeftNode());
        System.out.print(root.GetKeyValue() + " ");
        inOrder(root.GetRightNode());

    }

}
