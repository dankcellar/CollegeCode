
public class BST 
{
	// This is the m_objRootNode node, which starts off as null
	//   when the BST is empty.
	BSTNode m_objRootNode;
	
	// Class constructor.
	public BST()
	{
		// Not really necessary, provided for clarity.
		m_objRootNode = null;
	}

	// Method to see if the tree is empty.
	public boolean IsEmpty()
	{
		// Return a boolean indicating whether the
		//   three is empty or not.
		return( m_objRootNode == null );
	}

	/* Functions to search for an element */
    public BSTNode Search( int nKeyValue )
    {
        return( Search( m_objRootNode, nKeyValue ) );
    }
    
    // Method to search for an element recursively.
    private BSTNode Search( BSTNode objNode, int nKeyValue )
    {
    	
    	if( objNode == null )
    	{
    		return( null );
    	}
    	
    	// First, we get the key value for this node.
    	int nThisKeyValue = objNode.GetKeyValue();
            
    	// See if the passed in key value is less. If so,
    	//   this indicates that we need to go left.
    	if( nKeyValue < nThisKeyValue )
    	{
    		// Get the left node object reference so we
    		//   can walk down it.
    		objNode = objNode.GetLeftNode();
    	}
            
    	// See if the passed in key value is greater. If so,
    	//   this indicates that we need to go right.
    	else if( nKeyValue > nThisKeyValue )
    	{
    		// Get the right node object reference so we
    		//   can walk down it.
    		objNode = objNode.GetRightNode();
    	}

    	// Here we have found the node with the key
    	//   value that was passed in.
    	else
    	{
    		return( objNode );
    	}
            
    	// Now call Search recursively.
    	return( Search( objNode, nKeyValue ) );
	}
    
    // This method inserts a node based on the key value.
    public void Insert( int nKeyValue ) 
    {
    	// The root node is returned to m_objRootNode from Insert()
    	m_objRootNode = Insert( nKeyValue, m_objRootNode );
    }    

    // Class protected (internal) method to insert nodes. This method
    //   will be called recursively.
    protected BSTNode Insert( int nKeyValue, BSTNode objNode ) 
    {
 
    	// This node is null and simply needs to be allocated.
        if( objNode == null )
        {
        	objNode = new BSTNode( nKeyValue );
        }
        
        // Here we need to walk left.
        else if( nKeyValue < objNode.GetKeyValue() )
        {        	        	
        	// Set the left node of this object by recursively walking left.
        	objNode.SetLeftNode( Insert( nKeyValue, objNode.GetLeftNode() ) );
        }
        
        // Here we need to talk right.
        else if( nKeyValue > objNode.GetKeyValue() )
        {        	        	
        	// Set the right node of this object by recursively walking right.
        	objNode.SetRightNode( Insert( nKeyValue, objNode.GetRightNode() ) );
        }
        
        return( objNode );
    }
    
    // Functions to delete data 
    public void Delete(int key)
    {
        if (IsEmpty())
            System.out.println("Tree Empty");
        else if (Search(key) == null)
            System.out.println("Sorry "+ key +" is not present");
        else
        {
        	m_objRootNode = Delete(m_objRootNode, key);
            System.out.println(key + " deleted from the tree");
        }
    }
   
    // Functions to delete data 
    private BSTNode Delete(BSTNode m_objRootNode, int k)
    {
        BSTNode p, p2, n;
        if (m_objRootNode.GetKeyValue() == k)
        {
            BSTNode lt, rt;
            lt = m_objRootNode.GetLeftNode();
            rt = m_objRootNode.GetRightNode();
            if (lt == null && rt == null)
                return null;
            else if (lt == null)
            {
                p = rt;
                return p;
            }
            else if (rt == null)
            {
                p = lt;
                return p;
            }
            else
            {
                p2 = rt;
                p = rt;
                while (p.GetLeftNode() != null)
                    p = p.GetLeftNode();
                p.SetLeftNode(lt);
                return p2;
            }
        }
        if (k < m_objRootNode.GetKeyValue())
        {
            n = Delete(m_objRootNode.GetLeftNode(), k);
            m_objRootNode.SetLeftNode(n);
        }
        else
        {
            n = Delete(m_objRootNode.GetRightNode(), k);
            m_objRootNode.SetRightNode(n);             
        }
        return m_objRootNode;
    }
  
    // Find the root node
    public BSTNode getRootNode() {
        
    	return m_objRootNode;
    }

    // Get the minimum value
    public int getMin()
    {
    	
    	if (m_objRootNode.GetLeftNode() == null) 
            return m_objRootNode.GetKeyValue();
    	 
    	BSTNode tempNode = m_objRootNode;
    	     
        while (tempNode.GetLeftNode() != null) {
        	tempNode = tempNode.GetLeftNode();
        }
        return tempNode.GetKeyValue();
    }

    // Get the maximum value
    public int getMax()
    {
    	if (m_objRootNode.GetRightNode() == null) 
            return m_objRootNode.GetKeyValue();
    	 
    	BSTNode tempNode = m_objRootNode;
    	     
        while (tempNode.GetRightNode() != null) {
        	tempNode = tempNode.GetRightNode();
        }
        return tempNode.GetKeyValue();
    }

    public int getRank(BSTNode ds) 
    {

    	Search(ds, ds.GetKeyValue());
    	return 0;
    }
    
    public int getRank(int nValue)
    {
    	Search(nValue);
    	return 0;
    }

}
